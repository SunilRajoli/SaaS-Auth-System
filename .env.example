# =============================================================================
# .env.example (Template file - commit to git)
# =============================================================================
# Copy this file to .env and fill in your actual values
# This shows other developers what environment variables are needed

# =============================================================================
# SERVER CONFIGURATION
# =============================================================================
# NODE_ENV determines if we're in development, production, or testing
# This affects logging levels, error details, and performance optimizations
NODE_ENV=development

# PORT is where our Express server will listen for incoming requests
# Railway/Render automatically set this in production
PORT=3000

# =============================================================================
# DATABASE CONFIGURATION (PostgreSQL)
# =============================================================================
# DATABASE_URL is the complete connection string to PostgreSQL
# Format: postgresql://username:password@host:port/database_name
# For local development: postgresql://postgres:yourpassword@localhost:5432/saas_db
# For production: use your hosting provider's database URL
DATABASE_URL=postgresql://username:password@localhost:5432/saas_db

# Individual database components (alternative to DATABASE_URL)
# Some deployments prefer separate variables instead of a connection string
DB_HOST=localhost
DB_PORT=5432
DB_NAME=saas_db
DB_USERNAME=postgres
DB_PASSWORD=yourpassword

# =============================================================================
# REDIS CONFIGURATION (Caching & Rate Limiting)
# =============================================================================
# REDIS_URL is the connection string for Redis server
# For local development: redis://localhost:6379
# For production: use your Redis provider's URL (like Redis Labs, Upstash)
REDIS_URL=redis://localhost:6379

# Individual Redis components (if not using URL)
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=

# =============================================================================
# JWT (JSON Web Token) CONFIGURATION
# =============================================================================
# JWT secrets are used to sign and verify tokens - NEVER share these!
# Generate strong secrets: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"

# JWT_ACCESS_SECRET signs short-lived access tokens (for API requests)
JWT_ACCESS_SECRET=your-super-secret-access-key-change-this-in-production

# JWT_REFRESH_SECRET signs long-lived refresh tokens (for staying logged in)
JWT_REFRESH_SECRET=your-super-secret-refresh-key-change-this-in-production

# Token expiration times
# Access tokens expire quickly for security (15-30 minutes)
JWT_ACCESS_EXPIRES=15m
# Refresh tokens last longer so users don't have to login often (7 days)
JWT_REFRESH_EXPIRES=7d

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================
# BCRYPT_ROUNDS determines password hashing strength
# Higher = more secure but slower. 12 is good balance for production
BCRYPT_ROUNDS=12

# API_RATE_LIMIT controls how many requests per minute per user
# Prevents abuse and DDoS attacks
API_RATE_LIMIT_REQUESTS=100
API_RATE_LIMIT_WINDOW=60000

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================
# LOG_LEVEL controls which logs are shown (error, warn, info, debug)
# Use 'debug' in development, 'info' in production
LOG_LEVEL=debug

# LOG_TO_FILE determines if logs are saved to files (true/false)
LOG_TO_FILE=true

# =============================================================================
# CORS CONFIGURATION (Cross-Origin Resource Sharing)
# =============================================================================
# CORS_ORIGIN defines which domains can make requests to your API
# Use specific URLs in production for security
# For development, * allows all origins
CORS_ORIGIN=*

# =============================================================================
# EMAIL CONFIGURATION (Optional - for user invitations)
# =============================================================================
# If you plan to send invitation emails, configure SMTP settings
# SMTP_HOST=smtp.gmail.com
# SMTP_PORT=587
# SMTP_USER=your-email@gmail.com
# SMTP_PASSWORD=your-app-specific-password